/home/yongxuan/anaconda3/envs/clip/lib/python3.8/site-packages/huggingface_hub/file_download.py:943: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
/home/yongxuan/SurgVLP/datasets/utils.py:74: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  features = torch.load(f"{cfg.cache_dir}/{split}local_f_part{part_idx}.pt")
/home/yongxuan/SurgVLP/datasets/utils.py:75: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  labels = torch.load(f"{cfg.cache_dir}/{split}local_l_part{part_idx}.pt")
loading num parts:  0
loading num parts:  1
loading num parts:  2
loading num parts:  3
loading num parts:  4
num_shots is  4
num_shots is  4
Epoch 1 Loss: 0.8505
Epoch 1 best val f1 0.3934 test f1 0.3057743310928345
Epoch 2 Loss: 0.8364
Epoch 3 Loss: 0.8237
Epoch 4 Loss: 0.8121
Epoch 5 Loss: 0.8015
Epoch 6 Loss: 0.7919
Epoch 7 Loss: 0.7828
Epoch 8 Loss: 0.7743
Epoch 9 Loss: 0.7665
Epoch 10 Loss: 0.7593
Epoch 11 Loss: 0.7525
Epoch 12 Loss: 0.7461
Epoch 13 Loss: 0.7402
Epoch 14 Loss: 0.7344
Epoch 15 Loss: 0.7290
Epoch 16 Loss: 0.7239
Epoch 17 Loss: 0.7191
Epoch 18 Loss: 0.7146
Epoch 19 Loss: 0.7102
Epoch 20 Loss: 0.7061
Epoch 21 Loss: 0.7029
Epoch 21 best val f1 0.3951 test f1 0.3057771325111389
Epoch 22 Loss: 0.7002
Epoch 22 best val f1 0.4000 test f1 0.3057771325111389
Epoch 23 Loss: 0.6978
Epoch 24 Loss: 0.6952
Epoch 25 Loss: 0.6926
Epoch 26 Loss: 0.6898
Epoch 27 Loss: 0.6870
Epoch 28 Loss: 0.6842
Epoch 29 Loss: 0.6814
Traceback (most recent call last):
  File "few_shot.py", line 76, in <module>
    main(configs[args.method], args.method)
  File "few_shot.py", line 52, in main
    metrics = method(dataset)
  File "/home/yongxuan/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/yongxuan/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yongxuan/SurgVLP/methods/linear_probe_plus.py", line 308, in forward
    test_metrics = self.get_test_metrics()
  File "/home/yongxuan/SurgVLP/methods/linear_probe_plus.py", line 78, in get_test_metrics
    attn_batch_features = self.model.attention_pooling(batch_features, self.templates)  # (bs, 768)
  File "/home/yongxuan/SurgVLP/surgvlp/codes/models/algorithms/SurgVLP.py", line 105, in attention_pooling
    _, feats_templates, _ = self.extract_feat_text(ids=input_ids, attn_mask=attention_masks, token_type=token_type_ids)
  File "/home/yongxuan/SurgVLP/surgvlp/codes/models/algorithms/SurgVLP.py", line 73, in extract_feat_text
    text_emb_l, text_emb_g, sents = self.backbone_text(ids, attn_mask, token_type)
  File "/home/yongxuan/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/yongxuan/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yongxuan/SurgVLP/surgvlp/codes/models/backbones/text_backbones.py", line 119, in forward
    embeddings, sents = self.aggregate_tokens(embeddings, ids)
  File "/home/yongxuan/SurgVLP/surgvlp/codes/models/backbones/text_backbones.py", line 60, in aggregate_tokens
    word = self.idxtoword[word_id.item()]
KeyboardInterrupt
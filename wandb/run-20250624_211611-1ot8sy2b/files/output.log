/home/yongxuan/anaconda3/envs/clip/lib/python3.8/site-packages/huggingface_hub/file_download.py:943: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
/home/yongxuan/SurgVLP/datasets/utils.py:74: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  features = torch.load(f"{cfg.cache_dir}/{split}local_f_part{part_idx}.pt")
loading num parts:  0
loading num parts:  1
/home/yongxuan/SurgVLP/datasets/utils.py:75: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  labels = torch.load(f"{cfg.cache_dir}/{split}local_l_part{part_idx}.pt")
loading num parts:  2
loading num parts:  3
loading num parts:  4
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.51it/s]
num_shots is  16
num_shots is  16
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])

100%|██████████████████████████████████████████████████████████████████| 2/2 [00:01<00:00,  1.80it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.23it/s]
Epoch 1 best val f1 0.2973 test f1 0.3734595775604248
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 2 Loss: 0.3502
Epoch 2 best val f1 0.5286 test f1 0.4878350794315338
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 3 Loss: 0.0130
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
Epoch 3 best val f1 0.5407 test f1 0.4366936683654785
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.20it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([48, 49, 768])
Epoch 4 Loss: -0.2226
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.97it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.26it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.99it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.27it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 8 Loss: -0.3713
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.27it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 9 Loss: -0.4093
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.09it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 10 Loss: -0.4399
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.26it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 11 Loss: -0.4650
torch.Size([64, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.29it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([48, 49, 768])
Epoch 12 Loss: -0.5024
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])

100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.24it/s]
Epoch 14 best val f1 0.5489 test f1 0.4154181182384491
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 15 Loss: -0.5982
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.24it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 16 Loss: -0.6240
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.26it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 17 Loss: -0.6467
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
Epoch 17 best val f1 0.5497 test f1 0.42639413475990295
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.17it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  2.00it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])

100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
Epoch 19 best val f1 0.5538 test f1 0.43787962198257446
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.25it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 20 Loss: -0.7328
Epoch 20 best val f1 0.5561 test f1 0.43934929370880127
torch.Size([64, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.06it/s]
torch.Size([48, 49, 768])
Epoch 21 Loss: -0.7553
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.98it/s]
Epoch 21 best val f1 0.5623 test f1 0.4400416314601898
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.99it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.99it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.19it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.27it/s]
torch.Size([48, 49, 768])
Epoch 24 Loss: -0.8115
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 25 Loss: -0.8203
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.24it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 26 Loss: -0.8386
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.15it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([48, 49, 768])
Epoch 27 Loss: -0.8432
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.03it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([48, 49, 768])
Epoch 28 Loss: -0.8597
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  2.00it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])

100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
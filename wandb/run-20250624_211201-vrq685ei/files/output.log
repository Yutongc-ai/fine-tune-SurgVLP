/home/yongxuan/anaconda3/envs/clip/lib/python3.8/site-packages/huggingface_hub/file_download.py:943: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
/home/yongxuan/SurgVLP/datasets/utils.py:74: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  features = torch.load(f"{cfg.cache_dir}/{split}local_f_part{part_idx}.pt")
loading num parts:  0
loading num parts:  1
loading num parts:  2
/home/yongxuan/SurgVLP/datasets/utils.py:75: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  labels = torch.load(f"{cfg.cache_dir}/{split}local_l_part{part_idx}.pt")
loading num parts:  3
loading num parts:  4
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
num_shots is  16
num_shots is  16
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])

100%|██████████████████████████████████████████████████████████████████| 2/2 [00:01<00:00,  1.56it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.94it/s]
Epoch 1 best val f1 0.2581 test f1 0.3407506048679352
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])

100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.25it/s]
Epoch 2 best val f1 0.5370 test f1 0.513066291809082
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.18it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 3 Loss: 0.1147
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
Epoch 3 best val f1 0.5734 test f1 0.4827877879142761
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.26it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.97it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.26it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 7 Loss: -0.3425
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.29it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 8 Loss: -0.3743
torch.Size([64, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
torch.Size([48, 49, 768])
Epoch 9 Loss: -0.4014
torch.Size([64, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.29it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([48, 49, 768])
Epoch 10 Loss: -0.4305
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.97it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.26it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.98it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.26it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.29it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 15 Loss: -0.5826
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
Epoch 15 best val f1 0.5738 test f1 0.4254096746444702
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.24it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.26it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  2.00it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  2.01it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.25it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.24it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.21it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([48, 49, 768])
Epoch 19 Loss: -0.6874
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 20 Loss: -0.7162
Epoch 20 best val f1 0.5791 test f1 0.45421546697616577
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 21 Loss: -0.7328
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 22 Loss: -0.7533
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.98it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])

100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
Epoch 24 best val f1 0.5806 test f1 0.45587342977523804
torch.Size([64, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.23it/s]
torch.Size([48, 49, 768])
Epoch 25 Loss: -0.8062
torch.Size([64, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
  0%|                                                                          | 0/2 [00:00<?, ?it/s]
torch.Size([48, 49, 768])
Epoch 26 Loss: -0.8167
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])

100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.28it/s]
 50%|█████████████████████████████████                                 | 1/2 [00:00<00:00,  1.98it/s]
Epoch 27 best val f1 0.5903 test f1 0.4503767788410187
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.27it/s]
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.25it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 29 Loss: -0.8553
100%|██████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  2.25it/s]
torch.Size([64, 49, 768])
torch.Size([48, 49, 768])
Epoch 30 Loss: -0.8629